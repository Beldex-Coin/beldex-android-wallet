def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
//version code 1 and version name 1.0.0 'Feng Huang' Release Date 29-10-2021
//version code 2 and version name 1.0.1 'Feng Huang' Internal Test Release Date 10-11-2021
//version code 3 and version name 1.0.2 'Feng Huang' Internal Test Release Date 10-11-2021
//version code 3 and version name 1.0.2 'Feng Huang' Release Date 11-11-2021

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    ndkVersion '21.3.6528147'
    defaultConfig {
        //applicationId "com.m2049r.xmrwallet"
        applicationId "com.beldex.beldex_bdx_wallet"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 3
        versionName "1.0.2 'Feng Huang'" //29-10-2021 version code 10 and version name 1.0.0 'Feng Huang'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments '-DANDROID_STL=c++_shared'
            }
        }
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("key.jks")
            //storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled true
            v2SigningEnabled false
        }
    }
    bundle {
        language {
            enableSplit = false
        }
    }

    flavorDimensions 'type', 'net'
    productFlavors {
        mainnet {
            dimension 'net'
        }
        stagenet {
            dimension 'net'
            //applicationIdSuffix '.stage'
        }
        devnet {
            dimension 'net'
            //applicationIdSuffix '.test'
        }
        alpha {
            dimension 'type'
            //applicationIdSuffix '.alpha'
        }
        prod {
            dimension 'type'
        }
    }

    buildTypes {
        /*release {
            signingConfig signingConfigs.release

            minifyEnabled true
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }*/
        debug {
            //applicationIdSuffix ".debug"
        }

        applicationVariants.all { variant ->
            variant.buildConfigField "String", "ID_A", "\"" + getId("ID_A") + "\""
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    // Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    // Enumerate translated locales
    def availableLocales = ["en"]
    new File("app/src/main/res/").eachFileMatch(~/^values-.*/) { file ->
        def languageTag = file.name.substring(7).replace("-r", "-")
        if (languageTag != "night")
            availableLocales.add(languageTag)
    }

    // APKs for the same app that all have the same version information.
    android.applicationVariants.all { variant ->
        // Update string resource: available_locales
        variant.resValue("string", "available_locales", availableLocales.join(","))
        // Assigns a different version code for each output APK.
        variant.outputs.all {
            output ->
                def abiName = output.getFilter(com.android.build.OutputFile.ABI)
                output.versionCodeOverride = abiCodes.get(abiName, 0) + versionCode

                if (abiName == null) abiName = "universal"
                def v = "${variant.versionName}".replaceFirst(" '.*' ?", "")
                        .replace(".", "x")
                        .replace("(", "-")
                        .replace(")", "")
                outputFileName = "$rootProject.ext.apkName-" + v + "_" + abiName + ".apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getId(name) {
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('monerujo.id')))
    return props[name]
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.5.31'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.31'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation "io.github.rburgst:okhttp-digest:2.5"
    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation 'com.nulab-inc:zxcvbn:1.5.2'

    implementation 'dnsjava:dnsjava:3.4.2'
    implementation 'org.jitsi:dnssecjava:2.0.0'
    implementation 'org.slf4j:slf4j-nop:1.7.30'
    implementation 'com.github.brnunes:swipeablerecyclerview:1.0.2'

    implementation 'commons-codec:commons-codec:1.10'

    //implementation 'com.github.aelstad:keccakj:1.1.0'

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2'
    testImplementation 'org.json:json:20210307'
    testImplementation 'net.jodah:concurrentunit:0.4.6'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.airbnb.android:lottie:3.5.0'
    implementation 'com.google.android.play:core:1.8.3'
}
