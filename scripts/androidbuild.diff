diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9f0445c68..bdac40aa1 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -356,7 +356,7 @@ if(APPLE)
   endif()
 endif()
 
-option(BUILD_STATIC_DEPS "Download, build and statically link against core dependencies" OFF)
+option(BUILD_STATIC_DEPS "Download, build and statically link against core dependencies" ON)
 if(BUILD_STATIC_DEPS)
   include(StaticBuild)
 endif()
diff --git a/cmake/StaticBuild.cmake b/cmake/StaticBuild.cmake
index 3fd4c46b2..e6e321b92 100755
--- a/cmake/StaticBuild.cmake
+++ b/cmake/StaticBuild.cmake
@@ -127,6 +127,7 @@ file(MAKE_DIRECTORY ${DEPS_DESTDIR}/include)
 set(deps_cc "${CMAKE_C_COMPILER}")
 set(deps_cxx "${CMAKE_CXX_COMPILER}")
 if (ANDROID)
+  message(STATUS "Building for ANDROID")
   if(NOT ANDROID_TOOLCHAIN_NAME)
     message(FATAL_ERROR "ANDROID_TOOLCHAIN_NAME not set; did you run with the proper android toolchain options?")
   endif()
@@ -148,7 +149,8 @@ if (ANDROID)
   set(deps_cc "${ANDROID_TOOLCHAIN_ROOT}/bin/${android_clang}")
   set(deps_cxx "${deps_cc}++")
 endif()
-
+message(STATUS "deps_cc: ${deps_cc}")
+message(STATUS "deps_cxx: ${deps_cxx}")
 if(CMAKE_C_COMPILER_LAUNCHER)
   set(deps_cc "${CMAKE_C_COMPILER_LAUNCHER} ${deps_cc}")
 endif()
@@ -353,7 +355,7 @@ if(CMAKE_CROSSCOMPILING)
       list(APPEND boost_extra "address-model=32")
     endif()
   elseif(ANDROID)
-    set(boost_bootstrap_cxx "--cxx=c++")
+    #set(boost_bootstrap_cxx "--cxx=c++")
   endif()
 endif()
 if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
diff --git a/src/crypto/CMakeLists.txt b/src/crypto/CMakeLists.txt
index 30c136b0d..a11ccd101 100755
--- a/src/crypto/CMakeLists.txt
+++ b/src/crypto/CMakeLists.txt
@@ -53,7 +53,7 @@ add_library(cncrypto
   rx-slow-hash.c
   tree-hash.c)
 
-option(MONERO_SLOW_HASH "Enable support for Monero CNv0/CNv1 hashing (currently only used in the Android wallet). Defaults to disabled because this causes many false alarms in virus/malware detection software." OFF)
+option(MONERO_SLOW_HASH "Enable support for Monero CNv0/CNv1 hashing (currently only used in the Android wallet). Defaults to disabled because this causes many false alarms in virus/malware detection software." ON)
 if(MONERO_SLOW_HASH)
   target_sources(cncrypto PRIVATE cn_monero_slow_hash.c)
   target_compile_definitions(cncrypto PUBLIC ENABLE_MONERO_SLOW_HASH)
diff --git a/src/simplewallet/simplewallet.cpp b/src/simplewallet/simplewallet.cpp
index f0650dbde..846d345b5 100755
--- a/src/simplewallet/simplewallet.cpp
+++ b/src/simplewallet/simplewallet.cpp
@@ -5772,7 +5772,7 @@ bool simple_wallet::confirm_and_send_tx(std::vector<cryptonote::address_parse_in
               tools::fail_msg_writer() << tools::ERR_MSG_NETWORK_VERSION_QUERY_FAILED;
               return false;
           }
-          float days = lock_time_in_blocks / float{BLOCKS_EXPECTED_IN_DAYS(1,*hf_version)};
+          float days = lock_time_in_blocks / static_cast<float>(BLOCKS_EXPECTED_IN_DAYS(1,*hf_version));
         prompt << boost::format(tr(".\nThis transaction (including %s change) will unlock on block %llu, in approximately %s days (assuming 2 minutes per block)")) % cryptonote::print_money(change) % ((unsigned long long)unlock_block) % days;
       }
 
diff --git a/src/wallet/api/CMakeLists.txt b/src/wallet/api/CMakeLists.txt
index 1cf191c50..e96d15089 100755
--- a/src/wallet/api/CMakeLists.txt
+++ b/src/wallet/api/CMakeLists.txt
@@ -27,6 +27,8 @@
 # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 # THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
+
 add_library(wallet_api
   wallet.cpp
   wallet_manager.cpp
@@ -52,6 +54,7 @@ target_link_libraries(wallet_api
   PRIVATE
     extra)
 
+
 set_property(TARGET wallet_api PROPERTY EXCLUDE_FROM_ALL TRUE)
 
 if(IOS)
@@ -146,7 +149,7 @@ if (STATIC AND BUILD_STATIC_DEPS)
     else()
         set(lib_folder lib)
     endif()
-    install(TARGETS wallet_merged
-        ARCHIVE DESTINATION ${lib_folder}
-        EXCLUDE_FROM_ALL)
+   # install(TARGETS wallet_merged
+   #     ARCHIVE DESTINATION ${lib_folder}
+   #     EXCLUDE_FROM_ALL)
 endif()
diff --git a/src/wallet/api/pending_transaction.cpp b/src/wallet/api/pending_transaction.cpp
index a7f3115f2..0341b7cbe 100755
--- a/src/wallet/api/pending_transaction.cpp
+++ b/src/wallet/api/pending_transaction.cpp
@@ -163,12 +163,12 @@ uint64_t PendingTransactionImpl::amount() const
         for (const auto &dest : ptx.dests) {
             result += dest.amount;
         }
-        service_nodes::staking_components sc;
+        master_nodes::staking_components sc;
         uint64_t height = m_wallet.blockChainHeight();
         std::optional<uint8_t> hf_version = m_wallet.hardForkVersion();
         if (hf_version)
         {
-          if (service_nodes::tx_get_staking_components_and_amounts(static_cast<cryptonote::network_type>(m_wallet.nettype()), *hf_version, ptx.tx, height, &sc)
+          if (master_nodes::tx_get_staking_components_and_amounts(static_cast<cryptonote::network_type>(m_wallet.nettype()), *hf_version, ptx.tx, height, &sc)
           && sc.transferred > 0)
             result = sc.transferred;
         }
diff --git a/src/wallet/api/subaddress_account.cpp b/src/wallet/api/subaddress_account.cpp
index 093d88ac9..b92484d9d 100755
--- a/src/wallet/api/subaddress_account.cpp
+++ b/src/wallet/api/subaddress_account.cpp
@@ -60,19 +60,25 @@ void SubaddressAccountImpl::setLabel(uint32_t accountIndex, const std::string &l
 EXPORT
 void SubaddressAccountImpl::refresh() 
 {
-  LOG_PRINT_L2("Refreshing subaddress account");
+    std::optional<uint8_t> hf_version = m_wallet->hardForkVersion();
+    if (hf_version)
+    {
+        LOG_PRINT_L2("Refreshing subaddress account");
+        clearRows();
+        for (uint32_t i = 0; i < m_wallet->m_wallet->get_num_subaddress_accounts(); ++i)
+        {
+            m_rows.push_back(new SubaddressAccountRow(
+                    i,
+                    m_wallet->m_wallet->get_subaddress_as_str({i,0}),
+                    m_wallet->m_wallet->get_subaddress_label({i,0}),
+                    cryptonote::print_money(m_wallet->m_wallet->balance(i, false)),
+                    cryptonote::print_money(m_wallet->m_wallet->unlocked_balance(i, false,NULL,NULL,*hf_version))
+            ));
+        }
+    }
+
   
-  clearRows();
-  for (uint32_t i = 0; i < m_wallet->m_wallet->get_num_subaddress_accounts(); ++i)
-  {
-    m_rows.push_back(new SubaddressAccountRow(
-      i,
-      m_wallet->m_wallet->get_subaddress_as_str({i,0}),
-      m_wallet->m_wallet->get_subaddress_label({i,0}),
-      cryptonote::print_money(m_wallet->m_wallet->balance(i, false)),
-      cryptonote::print_money(m_wallet->m_wallet->unlocked_balance(i, false))
-    ));
-  }
+
 }
 
 EXPORT
diff --git a/src/wallet/api/wallet.cpp b/src/wallet/api/wallet.cpp
index 26bc1fe4b..bacde20eb 100755
--- a/src/wallet/api/wallet.cpp
+++ b/src/wallet/api/wallet.cpp
@@ -1064,7 +1064,12 @@ uint64_t WalletImpl::balance(uint32_t accountIndex) const
 EXPORT
 uint64_t WalletImpl::unlockedBalance(uint32_t accountIndex) const
 {
-    return m_wallet->unlocked_balance(accountIndex, false);
+    std::optional<uint8_t> hf_version = m_wallet->get_hard_fork_version();
+    if (!hf_version)
+    {
+        return 0;
+    }
+    return m_wallet->unlocked_balance(accountIndex, false,NULL,NULL,*hf_version);
 }
 
 EXPORT
diff --git a/src/wallet/api/wallet2_api.h b/src/wallet/api/wallet2_api.h
index 0e490011d..a08c03111 100755
--- a/src/wallet/api/wallet2_api.h
+++ b/src/wallet/api/wallet2_api.h
@@ -1018,7 +1018,7 @@ struct Wallet
     virtual Device getDeviceType() const = 0;
 
     /// Prepare a staking transaction; return nullptr on failure
-    virtual PendingTransaction* stakePending(const std::string& master_node_key, const uint64_t amount) = 0;
+    virtual PendingTransaction* stakePending(const std::string& master_node_key, const uint64_t& amount) = 0;
 
     virtual StakeUnlockResult* canRequestStakeUnlock(const std::string &mn_key) = 0;
 
